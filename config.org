#+TITLE: My Literate Emacs Configuration
#+AUTHOR: The Poet Logician
#+PROPERTY: head-args :tangle yes
#+OPTIONS: num:nil
* Startup
I have no idea what this does, but witchmacs uses it to speed bootup.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
      (add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(setq comp-deferred-compilation nil
      native-comp-deferred-compilation nil)
	  
(setq load-prefer-newer noninteractive)

(setq package-enable-at-startup nil)

#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(defconst IS-LINUX   (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))

(when (and IS-WINDOWS (null (getenv-internal "HOME")))
  (setenv "HOME" (getenv "USERPROFILE"))
  (setq abbreviated-home-dir nil))

(set-language-environment "UTF-8")

(require 'subr-x)
(require 'cl-lib)
(setq ad-redefinition-action 'accept)
(advice-add #'display-startup-echo-area-message :override #'ignore)
(setq auto-mode-case-fold nil)
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)
(setq fast-but-imprecise-scrolling t)
(setq ffap-machine-p-known 'reject)
(setq frame-inhibit-implied-resize t)
(setq gcmh-idle-delay 5  ; default is 15s
      gcmh-high-cons-threshold (* 16 1024 1024))
(setq idle-update-delay 1.0) 
(setq read-process-output-max (* 64 1024))
(when IS-WINDOWS
  (setq w32-get-true-file-attributes nil   ; decrease file IO workload
        w32-pipe-read-delay 0              ; faster IPC
        w32-pipe-buffer-size (* 64 1024))) ; read more at a time (was 4K)
(unless IS-LINUX (setq command-line-x-option-alist nil))
(setq confirm-nonexistent-file-or-buffer nil)
(setq hscroll-margin 2
      hscroll-step 1
      ;; Emacs spends too much effort recentering the screen if you scroll the
      ;; cursor more than N lines past window edges (where N is the settings of
      ;; `scroll-conservatively'). This is especially slow in larger files
      ;; during large-scale scrolling commands. If kept over 100, the window is
      ;; never automatically recentered.
      scroll-conservatively 101
      scroll-margin 0
      scroll-preserve-screen-position t
      ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
      ;; for tall lines.
      auto-window-vscroll nil
      ;; mouse
      mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
      mouse-wheel-scroll-amount-horizontal 2)
(blink-cursor-mode -1)
(setq blink-matching-paren nil)
(setq x-stretch-cursor nil)
(setq indicate-buffer-boundaries nil
      indicate-empty-lines nil)
(setq frame-title-format '("%b â€“ Emacs")
      icon-title-format frame-title-format)
(setq frame-resize-pixelwise t)
(setq window-resize-pixelwise nil)
(push '(menu-bar-lines . 0)   default-frame-alist)
(push '(tool-bar-lines . 0)   default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil)
(setq window-divider-default-places t
      window-divider-default-bottom-width 1
      window-divider-default-right-width 1)
#+END_SRC

Same as above
#+BEGIN_SRC emacs-lisp
(defvar startup/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun startup/revert-file-name-handler-alist ()
  (setq file-name-handler-alist startup/file-name-handler-alist))

(defun startup/reset-gc ()
  (setq gc-cons-threshold 16777216
	gc-cons-percentage 0.1))

(add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
(add-hook 'emacs-startup-hook 'startup/reset-gc)
#+END_SRC

#+RESULTS:
| startup/reset-gc | startup/revert-file-name-handler-alist | (lambda nil (message *** Emacs loaded in %s with %d garbage collections. (format %.2f seconds (float-time (time-subtract after-init-time before-init-time))) gcs-done)) |

This setups the melpa, enables async, and autoupdates packages
#+BEGIN_SRC emacs-lisp
	(require 'package)
	(setq package-enable-at-startup nil)
	(add-to-list 'package-archives
			 '("melpa" . "https://melpa.org/packages/"))
	(package-initialize)
  
	(defun change-font ()
  (interactive)
  (set-frame-font (w32-select-font) t t))
  
	(unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))
	(setq use-package-always-defer t)
	(setq use-package-always-ensure t)
	(use-package auto-package-update
	  :defer nil
	  :ensure t
	  :config
	  (setq auto-package-update-delete-old-versions t)
	  (setq auto-package-update-hide-results t)
	  (auto-package-update-maybe))
	 (use-package async
		:ensure t
		:init
		(dired-async-mode 1))
	(use-package gcmh
	   :config
	   (gcmh-mode 1))
#+END_SRC

#+RESULTS:

* General Configuration
To make Emacs a little more to my liking
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq ring-bell-function 'ignore)
  (setq find-file-visit-truename t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (load-theme 'doom-monokai-classic t)
  (global-hl-line-mode)
	(set-frame-font "Lucida Console-12" t t)
	(add-to-list 'default-frame-alist '(font . "Lucida Console-12"))
	(set-face-attribute 'default nil :font "Lucida Console-12")
	(set-fontset-font t 'symbol "Lucida Console")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (show-paren-mode 1)
  (setq inhibit-startup-message t
		inhibit-startup-echo-area-message user-login-name
		inhibit-default-init t
		;; Shave seconds off startup time by starting the scratch buffer in
		;; `fundamental-mode', rather than, say, `org-mode' or `text-mode', which
		;; pull in a ton of packages. `doom/open-scratch-buffer' provides a better
		;; scratch buffer anyway.
		initial-major-mode 'fundamental-mode
		initial-scratch-message nil)
  (setq x-select-enable-clipboard t)
  (scroll-bar-mode -1)
  (setq scroll-conservatively 100)
#+END_SRC

Modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
	:ensure t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 17)
  (setq doom-modeline-enable-word-count t))
#+END_SRC

Indenting
#+BEGIN_SRC emacs-lisp
		  (setq-default
		  delete-by-moving-to-trash t
		  tab-width 4
		  uniquify-buffer-name-style 'foward
		  window-combination-resize t
		standard-indent 4)
					(setq c-basic-offset tab-width
					backward-delete-char-untabify-method 'nil)
	  (display-time-mode 1)
	(unless (equal "Battery status not available"
				   (battery)))
#+END_SRC

Enhancing text
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
(setq electric-pair-pairs '(
                            (?\{ . ?\})
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\" . ?\")
                            ))
(electric-pair-mode t)
#+END_SRC

I like having several themes installed although I usually just use
the poet-dark theme.
#+BEGIN_SRC emacs-lisp
		(use-package all-the-icons)
	  (use-package solaire-mode
	:ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
 (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

 (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
 (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (use-package swiper
	:ensure t
	:bind ("C-s" . 'swiper))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :defer nil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybindings nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-vsplit-window-right t)
  (setq evil-want-split-window-below t)
  :config
  (evil-mode 1))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (setq evil-collection-mode-list '(dashboard dired buffer))
  (evil-collection-init))
#+END_SRC

Look into configuring avy
#+BEGIN_SRC emacs-lisp
 (use-package avy
	:ensure t
	:bind
	("M-s" . avy-goto-char))
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (use-package switch-window
	:ensure t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcuts
		  '("a" "s" "d" "f" "j" "k" "l"))
	:bind
	([remap other-window] . switch-window))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ido
  :init
  (ido-mode 1)
  :config
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t))
#+END_SRC

General is a great package for creating keybindings with a leader key
#+BEGIN_SRC emacs-lisp
(use-package general
:config
(general-evil-setup t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'general)

(mmap
  ";" 'evil-ex
  ":" 'avy-next
  "/" 'swiper
  "f" 'avy-goto-char)
#+END_SRC

Buffers and Bookmarks
#+BEGIN_SRC emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
"b b" '(ido-switch-buffer :which-key "Switch Buffers")
"b c" '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
"b k" '(kill-current-buffer :which-key "Kill Current Buffer")
;; "b n" '(next-buffer :which-key "Next buffer")
;; "b p" '(previous-buffer :which-key "Previous buffer")
"b B" '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
"b K" '(ido-kill-buffer :which-key "Kill Buffers"))
#+END_SRC

Evaluating emacs-lisp

#+BEGIN_SRC emacs-lisp
(general-nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
  "x f" '(eval-buffer :which-key "Eval emacs-lisp in buffer")
  "x d" '(evale-deun :which-key "Eval defun")
  "x e"   '(eval-expression :which-key "Eval emacs-lisp expression")
  "x l"   '(eval-last-sexp :which-key "Eval last sexression")
  "x r"   '(eval-region :which-key "Eval region"))
#+END_SRC
Files and File Management
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(general-nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
"f d" '(dired :which-key "Open dired")
"f j" '(dired :which-key "Dired jump to current")
"f p" '(dired :which-key "Peed-dired")) 

(general-nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :init
  (ido-vertical-mode 1))
; This enables arrow keys to select while in ido mode. If you want to
; instead use the default Emacs keybindings, change it to
; "'C-n-and-C-p-only"
(setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
#+END_SRC
* Org-Mode Configuration
#+BEGIN_SRC emacs-lisp
 	(setq org-hide-emphasis-markers t)
  
			(font-lock-add-keywords 'org-mode
									  '(("^ *\\([-]\\) "
										 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
  
			(setq-default line-spacing 9)
			(require 'org-bullets)
			(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  
  
			(add-hook 'org-mode-hook 'variable-pitch-mode)
			(add-hook 'org-mode-hook 'visual-line-mode)
 
			(use-package org
			  :config
			  (add-hook 'org-mode-hook
						'(lambda ()
						   (visual-line-mode 1))))
  
			(use-package htmlize
			  :ensure t)
  
			(general-define-key
			 :keymaps 'org-mode-map
			 "M-n" 'org-next-visible-heading
			 "M-p" 'org-previous-visible-heading
  )
  (general-define-key
		"M-h" 'windmove-left
	  "M-l" 'windmove-right
	"M-j" 'windmove-down
  "M-k" 'windmove-up)
#+END_SRC
* Emacs Application Framework
  #+BEGIN_SRC emacs-lisp
;;(use-package ctable)
;;(use-package deferred)
;;(use-package epc)
;;(use-package s)
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
  :init
  (use-package epc :defer t :ensure t)
  (use-package ctable :defer t :ensure t)
  (use-package deferred :defer t :ensure t)
  (use-package s :defer t :ensure t)
  :custom
  (eaf-browser-continue-where-left-off t)
  :config
  (eaf-setq eaf-browser-enable-adblocker "true")
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+END_SRC
* Eshell Configuration
#+BEGIN_SRC emacs-lisp
(setq eshell-prompt-regexp "^[^ÃŽÂ±ÃŽÂ»\n]*[ÃŽÂ±ÃŽÂ»] ")
(setq eshell-prompt-function
      (lambda nil
        (concat
         (if (string= (eshell/pwd) (getenv "HOME"))
             (propertize "~" 'face `(:foreground "#99CCFF"))
           (replace-regexp-in-string
            (getenv "HOME")
            (propertize "~" 'face `(:foreground "#99CCFF"))
            (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
         (if (= (user-uid) 0)
             (propertize " ÃŽÂ± " 'face `(:foreground "#FF6666"))
         (propertize " ÃŽÂ» " 'face `(:foreground "#A6E22E"))))))

(setq eshell-highlight-prompt nil)

(defalias 'open 'find-file-other-window)
(defalias 'clean 'eshell/clear-scrollback)

(defun eshell/sudo-open (filename)
  "Open a file as root in Eshell."
  (let ((qual-filename (if (string-match "^/" filename)
                           filename
                         (concat (expand-file-name (eshell/pwd)) "/" filename))))
    (switch-to-buffer
     (find-file-noselect
      (concat "/sudo::" qual-filename)))))

(defun eshell-other-window ()
  "Create or visit an eshell buffer."
  (interactive)
  (if (not (get-buffer "*eshell*"))
      (progn
        (split-window-sensibly (selected-window))
        (other-window 1)
        (eshell))
    (switch-to-buffer-other-window "*eshell*")))

(global-set-key (kbd "<s-C-return>") 'eshell-other-window)
#+END_SRC
* MISC
  Magit is a git client which uses the transient interface aka very quick and awesome way to interact with github and gitlab.
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
			  (use-package org-journal
			  :init
			(setq org-journal-dir "~/kesha/Documents/org-mode/journal"
		  org-journal-date-prefix "#+TITLE: "
		org-journal-file-format "%Y-%m-$d.org"
	  org-journal-date-format "%A, %d %B %Y")
	:config
  (setq org-journal-find-file #'find-file-other-window))
  (setq org-journal-enable-agenda-integration t)
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))

#+END_SRC

The package yasnippet is a program which expands text, useful to quickly type things. For example `sout[TAB]` could expand to `System.out.println("[Cursor Here]")`.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :hook
  ((c-mode c++-mode) . yas-minor-mode)
  :config
  (yas-reload-all))

(use-package yasnippet-snippets
  :ensure t)

  #+END_SRC

 #+BEGIN_SRC emacs-lisp 
(use-package meghanada
  :ensure t
  :defer nil
  :config
  (add-hook 'java-mode-hook
            (lambda ()
              (meghanada-mode t)))
  (setq meghanada-java-path "java")
  (setq meghanada-maven-path "mvn"))
 #+END_SRC
